<?php 
declare(strict_types=1);
/**
 *
 *
 *  SakuraPanel >> neutrapp.com/page/sakura
 *              >> Project Installation
 * 
 */

use Phalcon\Di\FactoryDefault;

define('BASE_PATH', dirname(__FILE__));
define('APP_PATH', BASE_PATH . '/app');

include_once APP_PATH . '/config/inc/functions.inc.php';


/**
 * 
 * Run installer 
 * 
 */
$installer = new Install();

$installer->run(
    $argv[1] ?? 'help'
);






/*******
 *****
 ****
 * Installer / Console Class
 ****
 *****
 *******/


/**
 * Install
 */
class Install 
{
    const SLEEP_TIME = 0;
    protected $configs = [];
    protected $info;
    protected $db;
    protected $user;
    protected $templates = "./cli/templates/";
    protected $cache_dirs = [
        'logs/',
        'cache/',
        'cache/plugins/',
        'cache/shared/',
        'cache/global/',
        'cache/security/',
        'cache/sessions/',
        'cache/views/',
        '.phalcon/',
    ];
    
    function __construct()
    {
        $this->info = $this->getConfigs();
    }

    public function run($action = "install")
    {
        Console::line(intval(strlen($this->info->description) *1.2),'.');
        Console::print(Console::light_cyan($this->info->description),"SAKURA");
        Console::print(Console::light_cyan("Version : ".$this->info->version),"SAKURA");
        Console::print(Console::light_cyan("License : ".$this->info->license),"SAKURA");
        Console::print(Console::light_cyan("Author  : ".$this->info->authors[0]->name),"SAKURA");
        Console::line(intval(strlen($this->info->description) *1.2),'.');
        echo "\n";
        
        switch ($action) {
            case 'install':
                $this->startInstallation();
                break;
            case 'adduser':
                if (!$this->readEnvConfigs()) return;
                if (!$this->checkDatabaseEnv()) return;
                if (!$this->createAdminAccount()) return;
                break;
            case 'create-plugin':
                $this->createPlugin();
                break;
            case 'help':
                $this->printSakuraHelp();
                break;
            case 'test':
                $this->startTests();
                break;
            default:
                exit(Console::print("Unknown Action `{$action}` ! Failed ."));
                break;
        }

    }

     
    protected function startInstallation()
    {
        Console::line(40,'-');
        Console::print(Console::light_green("Start Installation ! "),"SAKURA");
        Console::print(Console::yellow("Thanks you for using Sakura Panel !"),"SAKURA");
        Console::line(40,'-');
        echo Console::cyan("[SAKURA] : "). Console::green("Do you Confirm To Start Installation [N/y] ?");
        
        if (!in_array(strtoupper(readline()), ["YES","Y","OK"])) {
            Console::bell();
            Console::print("The Installation was cancelled ! ","SAKURA","green");
            return;
        }

        $tests = ['checkPhalcon','createCacheFolders','createEnvFile','checkDatabaseEnv','migrationDatabase'];
        foreach ($tests as $name) {
            if (method_exists($this, $name)) {
                Console::line(1,"\n");
                if (!$this->{$name}()){
                    Console::bell();
                    Console::line();
                    exit(Console::print("Please check that you have the minimum requirement !"));
                }
            }else{
                exit(Console::print("Method $name does not exists !"));
            }
        }

        Console::line(1,"\n");
        Console::line(40,'-');
        Console::bell();
        Console::print(Console::light_green("Installation was successfully !"),"SAKURA");
        Console::print("Enjoy Sakura Panel ♥","SAKURA","purple");
        Console::print(Console::yellow("Thanks you for using Sakura Panel !"),"SAKURA");
        Console::print(Console::bold("Dont Forget to support us ♥ ! "),"SAKURA","red");
        Console::print(Console::bold("https://github.com/yassinrais/sakura-panel"),"SAKURA","cyan");
        Console::line(40,'-');
    }


    protected function createAdminAccount()
    {
        Console::line();
        Console::print("Create an Administrator account ..." ,"ADMIN","yellow");

        $inputs = [
            'fullname'=>'Full Name',
            'username'=>'Username',
            'email'=>'Email',
            'password'=>'Password',
        ];

        if (!$this->db) {
            Console::print('Db Connection missed ! ','ADMIN','red');
            return false;
        }

        $user = new \SakuraPanel\Models\User\Users;
        $user->role_name = "admins";
        $user->setIp('0.0.0.0');
        $user->status = $user::ACTIVE;
        
        foreach ($inputs as $key => $title) {
            echo  Console::yellow('         -> Enter '.$title.' : ');
            $user->$key = readline();
        }


        if ($user->save()) {
            Console::print("User Created Successfully ! ","ADMIN","green");
            return true;
        }
        foreach ($user->getMessages() as $msg) 
            Console::print("User Creation failed >> Error : $msg","ADMIN","red");

        return false;
    }


    protected function createPlugin()
    {
        Console::line();
        Console::print("Create a Plugin ..." ,"CREATE-PLUGIN","yellow");
        
        $plugin_tpl = $this->templates . "create-plugin/";
        if (!is_dir($plugin_tpl)) 
            return Console::print("Templates not found ! ","CREATE-PLUGIN","red");
        $config_file_json = "plugin.config.json";
        $tpl_plugin_config = $plugin_tpl.$config_file_json;

        if (!is_file($tpl_plugin_config)) 
            return Console::print("Plugin Config Template not found ! ","CREATE-PLUGIN","red");

        $config = json_decode(file_get_contents($tpl_plugin_config));

        $inputs = $config;

        foreach ($inputs as $key => $val) {
            echo  Console::yellow("         -> Enter $key [$val] : ");
            $config->$key = readline() ?: $val;
            if ($key == "name") {
                 if (!preg_match("/^[a-z0-9]*([a-z0-9][_-]{0,1})*[a-z0-9]$/", $config->name))
                    return Console::print("Plugin name must be an alphanumeric (no spaces , no special characters, no upper cases)","CREATE-PLUGIN","red");
            }
        }


        $plugin_new_dir = "app/plugins/{$config->name}/";
        
        $p = $plugin_tpl;

        if (is_dir($plugin_new_dir)) {
            Console::print("The are a plugin folder has the same name ! Do you confirm to rewrite plugin files ?","CREATE-PLUGIN","yellow");
            if (!in_array(strtoupper(readline()), ['Y','YES','OK','OKEY'])) 
                return Console::print("Process was cancelled !","CREATE-PLUGIN","red");
        }


        @mkdir($plugin_new_dir , 0775 , true);
        if (!is_dir($p)) return false;

        $scanned_dir = \SakuraPanel\Functions\_fullScanDirs($p.'*');
        $plugin_new_config_json = $plugin_new_dir . $config_file_json;


        $config->group = ucfirst($config->name);
        foreach ($scanned_dir as $file) {


            $file_name = explode($p, $file)[1];
            
            $file_dest = $plugin_new_dir . $file_name;
            $file_source = $p . $file_name;
            
            if (is_dir($file_source) && !is_dir($file_dest))
                mkdir($file_dest, 0775 , true);

            if (is_file($file_source)) {
                $file_dest_content = file_get_contents($file_source);
                foreach ($config as $key => $val) {
                    $file_dest_content = str_replace("__{$key}__", $val, $file_dest_content);
                    $file_dest = str_replace("__{$key}__", $val, $file_dest);
                }
                file_put_contents($file_dest, $file_dest_content);
            }
        }

        if (!is_file($plugin_new_config_json))
            unlink($plugin_new_config_json);

        if (file_put_contents($plugin_new_config_json, json_encode($config))) 
            return Console::print("Plugin Created Successfully ! ","CREATE-PLUGIN","green");

        return Console::print("creation `Plugin Config` failed ! ","CREATE-PLUGIN","red");
    }


    /** 
     * Run Dev Tests
     */
    protected function startTests(){
        Console::print('Test ClI is not avaialable for this moment !!'  ,'TESTS','red');
    }









    protected function getConfigs()
    {
        $f = @file_get_contents('composer.json') ?: null;
        if (!is_null($f)) {
            try {
                $c = json_decode($f);
                return $c;
            } catch (Exception $e) {
                
            }
        }

        return (object) [ 'description'=>'Sakura Panel Project','version'=>'1.0.0','license'=>'MIT' ,
        'authors'=>(object) [
            ['name'=>'Yassine Rais']
        ]];
    }


    private function createCacheFolders()
    {
        Console::line();
        Console::log('[CACHE] Create cache dirs ...' , "yellow");
        /**
         * Create Cache Dirs
         */
        $tests = [];
        foreach ($this->cache_dirs as $dir){
            if (!is_dir($dir)) {
                $tests[] = $mkdir = mkdir($dir , 0775 , true);
                if ( $mkdir ) {
                    Console::print(Console::yellow($dir) . Console::green(" > Created !  ") , "CACHE" );
                }else{
                    Console::print(Console::yellow($dir) . Console::red(" > Creation Failed!") , "CACHE" );
                }
            }else{
                Console::print(Console::yellow($dir) . Console::purple(" > already exists !") , "CACHE" );
            }
        }
        sleep($this::SLEEP_TIME);

        return !in_array(false, $tests);
    }

    private function checkPhalcon(){
        Console::print("Check if Phalcon::4.0.3 extension !" ,"EXTENSION","yellow");
       

       if (class_exists("\Phalcon\Version")) {
            $v = explode(".", \Phalcon\Version::get().".");

            if ("{$v[0]}.{$v[1]}" == "4.0") {

                Console::print("The Phalcon Extension version 4.0 exists !","EXTENSION","green");
                sleep($this::SLEEP_TIME);

                return true;
            }   

       }

       Console::print("The Phalcon Extension PHP does not exists ! ","EXTENSION","red");
       return false;
    }

    protected function readEnvConfigs()
    {
        
        /**
         * Di factory to load models
         */
        $di = new FactoryDefault();


        /**
         * Read services
         */
        include APP_PATH . '/config/services.php';

        /**
         * Get config service for use in inline setup below
         */
        $config = $di->getConfig();

        /**
         * Include Autoloader
         */
        include APP_PATH . '/config/loader.php';

        $env_configs_file = explode("\n", str_replace("\r", "", file_get_contents(".env")));
        foreach ($env_configs_file as $line) {
            if (strpos($line, "=") && str_split($line)[0] !== "#") {
                $c = explode("=", $line."=");

                $k = $c[0];
                $v = $c[1];

                if (empty($k)) continue;
                $v = str_split($v);
                $closet = ($v[count($v)-1].$v[0] === '""') ? true : false;

                $this->configs[$k] = $closet ? substr($c[1], 1 , count($v)-2): $c[1];
            }
        }


        return file_exists(".env");
    }
    private function createEnvFile()
    {
        Console::line();
        $envex = ".env.example";
        $env = ".env";
    
        $this->configs = [];

        if (file_exists($envex)) {
            
            $envContent = file_get_contents($envex);
            if (file_exists($env)) {
                Console::print(Console::yellow($env) . Console::red(" file already exists !") ,"CONFIGS");
                $this->readEnvConfigs();

                echo Console::cyan("[CONFIGS] ").Console::yellow("Do you confirm to rewrite the file [N/y] ?");
                $rewrite = readline();
                if (!in_array(strtoupper($rewrite), ["Y","YES","OK","CONFIRM"]) || $rewrite === "") {
                    Console::print(Console::bold("Skip"). Console::yellow(" Rewriting file $env") ,"CONFIGS" , "red");
                    return file_exists($env);
                }
            }

            $env_lines = explode("\n", str_replace("\n\n", "\n", str_replace("\r", "", $envContent)));
            $configs_lines = [];

            Console::print("Rewriting file $env" ,"CONFIGS","yellow");
            foreach ($env_lines as $line) {
                if (strpos($line, "=") && str_split($line)[0] !== "#") {
                    $c = explode("=", $line."=");

                    $k = $c[0];
                    $v = $c[1];

                    if (empty($k)) continue;

                    $v = str_split($v);
                    $closet = ($v[count($v)-1].$v[0] === '""') ? true : false;
                    $val =  $closet ? substr($c[1], 1 , count($v)-2): $c[1];

                    if (!empty($this->configs[$k])) 
                        $val = $this->configs[$k];

                    echo Console::cyan("[CONFIGS] : ") .Console::purple($k) . " -> Value [".Console::cyan($val)."] : ";
                    $rd = readline();

                    $this->configs[$k] = $rd !== "" ? $rd : $val;
                    
                    if ($rd !== "") $val = $rd;

                    if (preg_match('/[^a-z_\-0-9]/i', $val)) 
                        $val = '"'.str_replace("\"", '\"', $rd).'"';
                    
                    $configs_lines[] = "$k=$val";
                }else{
                    $configs_lines[] = $line;
                }
            }
            
            Console::print("Create `$env` file ... Ctrl + C to cancel ! ","CONFIGS","yellow");
            sleep($this::SLEEP_TIME); // to give user the control to cancel the cli

            $env_final_content = "";
            if (file_put_contents($env, implode("\n", $configs_lines))){
                Console::print("The `$env` file was created successfully !","CONFIGS","green");
            }else{
                Console::print("There is a problem creating `$env` file ! ","CONFIGS","red");
                return false;
            }

            // read if exists or not
        }else{
            Console::print(".env.example file was not found  !" ,"CONFIGS","red");
        }


        return file_exists($env);
    }

    protected function checkDatabaseEnv()
    {
        Console::line();
        $env = ".env";
        if (!is_file($env)) return;

        $dbName = $this->configs['DB_NAME'] ?? 'test';
        $dbHost = $this->configs['DB_HOST'] ?? 'localhost';
        $dbUser = $this->configs['DB_USER'] ?? 'root';
        $dbPass = $this->configs['DB_PASS'] ?? '';
        
        Console::print("Check Database information ($dbName,$dbHost,$dbUser)  ...","DATABASE","yellow");

        try {
            $dbConnection = @new mysqli($dbHost , $dbUser , $dbPass , $dbName);
            $this->db = $dbConnection;
            if (!$dbConnection->connect_error) 
                {
                    Console::print("Database information are correct !","DATABASE","green");
                    return true;
                }            
            else
                Console::print(Console::bold((string) $dbConnection->connect_error),"DATABASE","red");

        } catch (Exception $e) {
            Console::print(Console::bold($e->getMessage()),"DATABASE","red");
        }

        Console::print("Incorrect database information !","DATABASE","red");
        return !$dbConnection->connect_error;
    }

    protected function migrationDatabase()
    {

        Console::line();
        Console::print("Migration the models tables to Database  ..." ,"MIGRATION","yellow");
        Console::print("Execute : `phalcon migration run` ...","MIGRATION","yellow");


        ob_start();
        system("phalcon migration run");
        $ex = ob_get_contents();
        $ex = strtolower(preg_replace('/\s\s+/', ' ',$ex));
        ob_clean();


        Console::print($ex, "MIGRATION","light_gray");

        return strpos($ex, "up to date") > -1 || strpos($ex, "successfully");
    }

    protected function printSakuraHelp()
    {
        Console::print(" # To Install Sakura Panel : ","HELP","yellow");
        Console::print(Console::cyan(" --> Run :") . Console::light_purple(" composer install")   ,"HELP");
        Console::print(Console::cyan(" --> Run :") . Console::light_purple(" sakura-cli install") ,"HELP");
        Console::line();
        Console::print(" # To Add User to Sakura Panel : ","HELP","yellow");
        Console::print(Console::cyan(" --> Run :") . Console::light_purple(" sakura-cli adduser") ,"HELP");
        Console::line();
        Console::print(" # To Create Plugin : ","HELP","yellow");
        Console::print(Console::cyan(" --> Run :") . Console::light_purple(" sakura-cli create-plugin") ,"HELP");
        Console::line();
    }

}


/**
 * CLI Colors
 */
class Console {
 
    static $foreground_colors = array(
        'bold'         => '1',    'dim'          => '2',
        'black'        => '0;30', 'dark_gray'    => '1;30',
        'blue'         => '0;34', 'light_blue'   => '1;34',
        'green'        => '0;32', 'light_green'  => '1;32',
        'cyan'         => '0;36', 'light_cyan'   => '1;36',
        'red'          => '0;31', 'light_red'    => '1;31',
        'purple'       => '0;35', 'light_purple' => '1;35',
        'brown'        => '0;33', 'yellow'       => '1;33',
        'light_gray'   => '0;37', 'white'        => '1;37',
        'normal'       => '0;39',
    );
    
    static $background_colors = array(
        'black'        => '40',   'red'          => '41',
        'green'        => '42',   'yellow'       => '43',
        'blue'         => '44',   'magenta'      => '45',
        'cyan'         => '46',   'light_gray'   => '47',
    );
 
    static $options = array(
        'underline'    => '4',    'blink'         => '5', 
        'reverse'      => '7',    'hidden'        => '8',
    );

    static $EOF = "\n";

    /**
     * Logs a string to console.
     * @param  string  $str        Input String
     * @param  string  $color      Text Color
     * @param  boolean $newline    Append EOF?
     * @param  [type]  $background Background Color
     * @return [type]              Formatted output
     */
    public static function log($str = '', $color = 'normal', $newline = true, $background_color = null)
    {
        if( is_bool($color) )
        {
            $newline = $color;
            $color   = 'normal';
        }
        elseif( is_string($color) && is_string($newline) )
        {
            $background_color = $newline;
            $newline          = true;
        }
        $str = $newline ? $str . self::$EOF : $str;

        echo self::$color($str, $background_color);
    }
    
    /**
     * Anything below this point (and its related variables):
     * Colored CLI Output is: (C) Jesse Donat
     * https://gist.github.com/donatj/1315354
     * -------------------------------------------------------------
     */
    
    /**
     * Catches static calls (Wildcard)
     * @param  string $foreground_color Text Color
     * @param  array  $args             Options
     * @return string                   Colored string
     */
    public static function __callStatic($foreground_color, $args)
    {
        $string         = $args[0];
        $colored_string = "";
 
        // Check if given foreground color found
        if( isset(self::$foreground_colors[$foreground_color]) ) {
            $colored_string .= "\033[" . self::$foreground_colors[$foreground_color] . "m";
        }
        else{
            die( $foreground_color . ' not a valid color');
        }
        
        array_shift($args);

        foreach( $args as $option ){
            // Check if given background color found
            if(isset(self::$background_colors[$option])) {
                $colored_string .= "\033[" . self::$background_colors[$option] . "m";
            }
            elseif(isset(self::$options[$option])) {
                $colored_string .= "\033[" . self::$options[$option] . "m";
            }
        }
        
        // Add string and end coloring
        $colored_string .= $string . "\033[0m";
        
        return $colored_string;
        
    }
 
    /**
     * Plays a bell sound in console (if available)
     * @param  integer $count Bell play count
     * @return string         Bell play string
     */
    public static function bell($count = 1) {
        echo str_repeat("\007", $count);
    }
 
    /**
     * Print a line
     * @param  integer $count Bell play count
     * @return string         Bell play string
     */
    public static function line($count = 40 , $char = '-') {
        echo str_repeat($char, $count)."\n";
    }
    

    public static function print($msg , $type = "GENERAL" , $color = "yellow")
    {
        Console::log(Console::cyan("[{$type}] : ") . Console::{$color}("$msg"));
    }

}


